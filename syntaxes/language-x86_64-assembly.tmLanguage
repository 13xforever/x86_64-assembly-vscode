<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE plist PUBLIC "-//Apple//DTD PLIST 1.0//EN" "http://www.apple.com/DTDs/PropertyList-1.0.dtd">
<plist version="1.0">
<dict>
	<key>fileTypes</key>
	<array>
		<string>asm</string>
		<string>nasm</string>
		<string>yasm</string>
		<string>inc</string>
		<string>s</string>
	</array>
	<key>name</key>
	<string>x86 and x86_64 Assembly</string>
	<key>patterns</key>
	<array>
		<dict>
			<key>include</key>
			<string>#registers</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#mnemonics</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#constants</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#entities</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#support</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#comments</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#preprocessor</string>
		</dict>
		<dict>
			<key>include</key>
			<string>#strings</string>
		</dict>
	</array>
	<key>repository</key>
	<dict>
		<key>comments</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(;|(^|\s)#\s).*$</string>
					<key>name</key>
					<string>comment.line</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>/\*</string>
					<key>end</key>
					<string>\*/</string>
					<key>name</key>
					<string>comment.block</string>
				</dict>
				<dict>
					<key>begin</key>
					<string>^\s*[\#%]\s*if\s+0\b</string>
					<key>end</key>
					<string>^\s*[\#%]\s*endif\b</string>
					<key>name</key>
					<string>comment.preprocessor</string>
				</dict>
			</array>
		</dict>
		<key>constants</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\b((([0-9\_]+\.[0-9\_]*)(e[+-]?[0-9\_]+)?|\.?[0-9\_]+e[+-]?[0-9\_]+))\b</string>
					<key>name</key>
					<string>constant.numeric.floating-point</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b([0-9\_]+p[0-9\_]*)\b</string>
					<key>name</key>
					<string>constant.numeric.packed-bcd</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(\$0[0-9a-f]+)\b</string>
					<key>name</key>
					<string>constant.numeric.literal</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b((0[by][01\_]+)|([01\_]+[by]))\b</string>
					<key>name</key>
					<string>constant.numeric.bin</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b((0[oq][0-7\_]+)|([0-7\_]+[oq]))\b</string>
					<key>name</key>
					<string>constant.numeric.oct</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b((0d[0-9\_]+)|([0-9\_]+d?))\b</string>
					<key>name</key>
					<string>constant.numeric.dec</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b((0[xh][0-9a-fA-F\_]+)|([0-9a-fA-F\_]+[hH]))\b</string>
					<key>name</key>
					<string>constant.numeric.hex</string>
				</dict>
			</array>
		</dict>
		<key>entities</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>((section|segment)\s+)?\.((ro)?data|bss|text)</string>
					<key>name</key>
					<string>entity.name.section</string>
				</dict>
				<dict>
					<key>match</key>
					<string>^\s*(%%)?(\w|[\._?])(\w|[_$#@~\.?])*\:</string>
					<key>name</key>
					<string>entity.name.function</string>
				</dict>
				<dict>
					<key>match</key>
					<string>^\s*([$@~])(\w|[_$#@~\.?])*\:</string>
					<key>name</key>
					<string>invalid.entity.name.function</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\$</string>
					<key>name</key>
					<string>entity.label.special</string>
				</dict>
				<dict>
					<key>match</key>
					<string>^\.?(globa?l|extern)\b</string>
					<key>name</key>
					<string>entity.directive</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(\$\w+)\b</string>
					<key>name</key>
					<string>text.variable</string>
				</dict>
			</array>
		</dict>
		<key>mnemonics</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#mnemonics-general-purpose</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#mnemonics-fpu</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#mnemonics-mmx</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#mnemonics-sse</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#mnemonics-sse2</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#mnemonics-sse3</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#mnemonics-sse4</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#mnemonics-aesni</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#mnemonics-avx</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#mnemonics-avx2</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#mnemonics-tsx</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#mnemonics-system</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#mnemonics-64bit</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#mnemonics-vmx</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#mnemonics-smx</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#mnemonics-intel-isa-sgx</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#mnemonics-intel-isa-mpx</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#mnemonics-intel-isa-sha</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#mnemonics-supplemental-amd</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#mnemonics-supplemental-cyrix</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#mnemonics-supplemental-via</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#mnemonics-undocumented</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#mnemonics-future-intel</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#mnemonics-pseudo-ops</string>
				</dict>
			</array>
		</dict>
		<key>mnemonics-64bit</key>
		<dict>
			<key>match</key>
			<string>\b(cdqe|cqo|(cmp|lod|mov|sto)sq|cmpxchg16b|mov(ntq|sxd)|scasq|swapgs|sys(call|ret))\b</string>
			<key>name</key>
			<string>keyword.mnemonic.64-bit-mode</string>
		</dict>
		<key>mnemonics-aesni</key>
		<dict>
			<key>match</key>
			<string>\b(aes((dec|enc)(last)?|imc|keygenassist)|pclmulqdq)\b</string>
			<key>name</key>
			<string>keyword.mnemonic.aesni</string>
		</dict>
		<key>mnemonics-avx</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\b(v((test|permil|maskmov)p[ds]|zero(all|upper)|(perm2|insert|extract|broadcast)f128|broadcasts[ds]))\b</string>
					<key>name</key>
					<string>keyword.mnemonic.avx</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(vaes((dec|enc)(last)?|imc|keygenassist)|vpclmulqdq)\b</string>
					<key>name</key>
					<string>keyword.mnemonic.avx.promoted.aes</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(v((cmp[ps]|u?comis)[ds]|pcmp([ei]str[im]|(eq|gt)[bdqw])))\b</string>
					<key>name</key>
					<string>keyword.mnemonic.avx.promoted.comparison</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(v(cvt(dq2pd|dq2ps|pd2ps|ps2pd|sd2ss|si2sd|si2ss|ss2sd|t?(pd2dq|ps2dq|sd2si|ss2si))))\b</string>
					<key>name</key>
					<string>keyword.mnemonic.avx.promoted.conversion</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(vh((add|sub)p[ds])|vph((add|sub)([dw]|sw)|minposuw))\b</string>
					<key>name</key>
					<string>keyword.mnemonic.avx.promoted.horizontal-packed-arithmetic</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(v((andn?|x?or)p[ds]))\b</string>
					<key>name</key>
					<string>keyword.mnemonic.avx.promoted.logical</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(v(mov(([ahl]|msk|nt|u)p[ds]|(hl|lh)ps|s([ds]|[hl]dup)|q)))\b</string>
					<key>name</key>
					<string>keyword.mnemonic.avx.promoted.mov</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(v((add|div|mul|sub|max|min|round|sqrt)[ps][ds]|(addsub|dp)p[ds]|(rcp|rsqrt)[ps]s))\b</string>
					<key>name</key>
					<string>keyword.mnemonic.avx.promoted.packed-arithmetic</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(v(pack[su]s(dw|wb)|punpck[hl](bw|dq|wd|qdq)|unpck[hl]p[ds]))\b</string>
					<key>name</key>
					<string>keyword.mnemonic.avx.promoted.packed-conversion</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(vp(shuf([bd]|[hl]w))|vshufp[ds])\b</string>
					<key>name</key>
					<string>keyword.mnemonic.avx.promoted.packed-shuffle</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(vp((abs|sign|(max|min)[su])[bdw]|(add|sub)([bdqw]|u?s[bw])|avg[bw]|extr[bdqw]|madd(wd|ubsw)|mul(hu?w|hrsw|l[dw]|u?dq)|sadbw))\b</string>
					<key>name</key>
					<string>keyword.mnemonic.avx.promoted.supplemental.arithmetic</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(vp(andn?|x?or))\b</string>
					<key>name</key>
					<string>keyword.mnemonic.avx.promoted.supplemental.logical</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(vpblend(vb|w))\b</string>
					<key>name</key>
					<string>keyword.mnemonic.avx.promoted.supplemental.blending</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(vpmov(mskb|[sz]x(b[dqw]|w[dq]|dq)))\b</string>
					<key>name</key>
					<string>keyword.mnemonic.avx.promoted.supplemental.mov</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(vp(insr[bdqw]|sll(dq|[dqw])|srl(dq)))\b</string>
					<key>name</key>
					<string>keyword.mnemonic.avx.promoted.simd-integer</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(vp(sra[dw]|srl[dqw]))\b</string>
					<key>name</key>
					<string>keyword.mnemonic.avx.promoted.shift-and-rotate</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(vblendv?p[ds])\b</string>
					<key>name</key>
					<string>keyword.mnemonic.avx.promoted.packed-blending</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(vp(test|alignr))\b</string>
					<key>name</key>
					<string>keyword.mnemonic.avx.promoted.packed-other</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(vmov(d(dup|qa|qu)?))\b</string>
					<key>name</key>
					<string>keyword.mnemonic.avx.promoted.simd-integer.mov</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(v((extract|insert)ps|lddqu|(ld|st)mxcsr|mpsadbw))\b</string>
					<key>name</key>
					<string>keyword.mnemonic.avx.promoted.other</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(v(maskmovdqu|movntdqa?))\b</string>
					<key>name</key>
					<string>keyword.mnemonic.avx.promoted.cacheability-control</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(vcvt(ph2ps|ps2ph))\b</string>
					<key>name</key>
					<string>keyword.mnemonic.16-bit-floating-point-conversion</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(vfn?m((add|sub)(132|213|231)[ps][ds])|vfm((addsub|subadd)(132|213|231)p[ds]))\b</string>
					<key>name</key>
					<string>keyword.mnemonic.fma</string>
				</dict>
			</array>
		</dict>
		<key>mnemonics-avx2</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\b(v((broadcast|extract|insert|perm2)i128|pmaskmov[dq]|perm([dsq]|p[sd])))\b</string>
					<key>name</key>
					<string>keyword.mnemonic.avx2.promoted.simd</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(vpbroadcast[bdqw])\b</string>
					<key>name</key>
					<string>keyword.mnemonic.avx2.promoted.packed</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(vp(blendd|s[lr]lv[dq]|sravd))\b</string>
					<key>name</key>
					<string>keyword.mnemonic.avx2.blend</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(vp?gather[dq][dq]|vgather([dq]|dq)p[ds])\b</string>
					<key>name</key>
					<string>keyword.mnemonic.avx2.gather</string>
				</dict>
			</array>
		</dict>
		<key>mnemonics-fpu</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\b(fcmov(n?([beu]|be)))\b</string>
					<key>name</key>
					<string>keyword.mnemonic.fpu.data-transfer.mov</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(f(i?(ld|stp?)|b(ld|stp)|xch))\b</string>
					<key>name</key>
					<string>keyword.mnemonic.fpu.data-transfer.other</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(f((add|div|mul|sub)p?|i(add|div|mul|sub)|(div|sub)rp?|i(div|sub)r))\b</string>
					<key>name</key>
					<string>keyword.mnemonic.fpu.basic-arithmetic.basic</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(f(prem1?|abs|chs|rndint|scale|sqrt|xtract))\b</string>
					<key>name</key>
					<string>keyword.mnemonic.fpu.basic-arithmetic.other</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(f(u?com[ip]?p?|icomp?|tst|xam))\b</string>
					<key>name</key>
					<string>keyword.mnemonic.fpu.comparison</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(f(sin|cos|sincos|pa?tan|2xm1|yl2x(p1)?))\b</string>
					<key>name</key>
					<string>keyword.mnemonic.fpu.transcendental</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(fld(1|z|pi|l2[et]|l[ng]2))\b</string>
					<key>name</key>
					<string>keyword.mnemonic.fpu.load-constants</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(f((inc|dec)stp|free|n?(init|clex|st[cs]w|stenv|save)|ld(cw|env)|rstor|nop)|f?wait)\b</string>
					<key>name</key>
					<string>keyword.mnemonic.fpu.control-management</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(fx(save|rstor)(64)?)\b</string>
					<key>name</key>
					<string>keyword.mnemonic.fpu.state-management</string>
				</dict>
			</array>
		</dict>
		<key>mnemonics-future-intel</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#mnemonics-future-intel-avx512</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#mnemonics-future-intel-opmask</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#mnemonics-future-intel-cet</string>
				</dict>
				<dict>
					<key>include</key>
					<string>#mnemonics-future-intel-other</string>
				</dict>
			</array>
		</dict>
		<key>mnemonics-future-intel-avx512</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\b(vblendm(pd|ps)|vpblendm[bdqw])\b</string>
					<key>name</key>
					<string>keyword.mnemonic.avx512.blend</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(vbroadcast[fi](32x[248]|64x[24])|v(extract|insert)[fi](32x[48]|64x[24])|vshuf[fi](32x4|64x2)|vpbroadcastm(b2q|w2d))\b</string>
					<key>name</key>
					<string>keyword.mnemonic.avx512.bits-mov</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(v(compress|expand)p[ds]|vp(compress|expand|conflict)[dq])\b</string>
					<key>name</key>
					<string>keyword.mnemonic.avx512.compress</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(vcvt(t?p[sd]2(udq|u?qq)|(udq|u?qq)2p[ds]|t?s[ds]2usi|usi2s[ds]))\b</string>
					<key>name</key>
					<string>keyword.mnemonic.avx512.conversion</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(v(fixupimm|fpclass|get(exp|mant)|range|(rcp|rsqrt)(14|28)|reduce|rndscale|scalef)([ps][ds]))\b</string>
					<key>name</key>
					<string>keyword.mnemonic.avx512.math</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(v(exp2p[ds]|(scatter|(gather|scatter)pf[01])[dq]p[ds]))\b</string>
					<key>name</key>
					<string>keyword.mnemonic.avx512.math</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(vmovdq(a(32|64)|u(8|16|32|64)))\b</string>
					<key>name</key>
					<string>keyword.mnemonic.avx512.simd-integer</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(vp(andn?|x?or)[dq])\b</string>
					<key>name</key>
					<string>keyword.mnemonic.avx512.logical</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(vpcmpu?[dqw])\b</string>
					<key>name</key>
					<string>keyword.mnemonic.avx512.packed-comparison</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(vp(absq|(lzcnt|ternlog)[dq]|madd52[lh]uq|(max|min)[su]q|mullq))\b</string>
					<key>name</key>
					<string>keyword.mnemonic.avx512.packed-math</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(vpmov(m2[bdqw]|[bdqw]2m|(u?s)?([qd][bw]|qd|wb)))\b</string>
					<key>name</key>
					<string>keyword.mnemonic.avx512.packed-mov</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(vp(ro[rl]v?[dq]|scatter[dq][dq]))\b</string>
					<key>name</key>
					<string>keyword.mnemonic.avx512.packed-shift</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(vptestn?m[bdqw])\b</string>
					<key>name</key>
					<string>keyword.mnemonic.avx512.packed-test</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(vperm([bdw]|[it]2([bdwq]|p[ds])))\b</string>
					<key>name</key>
					<string>keyword.mnemonic.avx512.permutations</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(valign[dq]|vdbpsadbw|vpmultishiftqb|vpsrav[dqw])\b</string>
					<key>name</key>
					<string>keyword.mnemonic.avx512.other</string>
				</dict>
			</array>
		</dict>
		<key>mnemonics-future-intel-cet</key>
		<dict>
			<key>match</key>
			<string>\b((inc|save|rstor)ssp|wru?ss|(set|clr)ssbsy|endbranch|endbr(32|64))\b</string>
			<key>name</key>
			<string>keyword.mnemonic.cet</string>
		</dict>
		<key>mnemonics-future-intel-opmask</key>
		<dict>
			<key>match</key>
			<string>\b(k(add|andn?|(xn?)?or|mov|not|(or)?test|shift[lr])[bdqw]|kunpck(bw|wd|dq))\b</string>
			<key>name</key>
			<string>keyword.mnemonic.opmask</string>
		</dict>
		<key>mnemonics-future-intel-other</key>
		<dict>
			<key>match</key>
			<string>\b(clflushopt|clwb|pcommit)\b</string>
			<key>name</key>
			<string>keyword.mnemonic.other</string>
		</dict>
		<key>mnemonics-general-purpose</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\b(mov([sz]x)?|cmov(n?[abceglopsz]|n?[abgl]e|p[eo]))\b</string>
					<key>name</key>
					<string>keyword.mnemonic.general-purpose.data-transfer.mov</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(xchg|bswap|xadd|cmpxchg(8b)?)\b</string>
					<key>name</key>
					<string>keyword.mnemonic.general-purpose.data-transfer.xchg</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b((push|pop)(ad?)?|cwde?|cdq|cbw)\b</string>
					<key>name</key>
					<string>keyword.mnemonic.general-purpose.data-transfer.other</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(adcx?|adox|add|sub|sbb|i?mul|i?div|inc|dec|neg|cmp)\b</string>
					<key>name</key>
					<string>keyword.mnemonic.general-purpose.binary-arithmetic</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(daa|das|aaa|aas|aam|aad)\b</string>
					<key>name</key>
					<string>keyword.mnemonic.general-purpose.decimal-arithmetic</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(and|x?or|not)\b</string>
					<key>name</key>
					<string>keyword.mnemonic.general-purpose.logical</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(s[ah][rl]|sh[rl]d|r[co][rl])\b</string>
					<key>name</key>
					<string>keyword.mnemonic.general-purpose.rotate</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(set(n?[abceglopsz]|n?[abgl]e|p[eo]))\b</string>
					<key>name</key>
					<string>keyword.mnemonic.general-purpose.bit-and-byte.set</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(bt[crs]?|bs[fr]|test|crc32|popcnt)\b</string>
					<key>name</key>
					<string>keyword.mnemonic.general-purpose.bit-and-byte.other</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(jmp|jn?[abceglopsz]|jn?[abgl]e|jp[eo]|j[er]?cxz)\b</string>
					<key>name</key>
					<string>keyword.mnemonic.general-purpose.control-transfer.jmp</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(loop(n?[ez])?|call|ret|iret[dq]?|into?|bound|enter|leave)\b</string>
					<key>name</key>
					<string>keyword.mnemonic.general-purpose.control-transfer.other</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b((mov|cmp|sca|lod|sto)(s[bdw]?)|rep(n?[ez])?)\b</string>
					<key>name</key>
					<string>keyword.mnemonic.general-purpose.strings</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b((in|out)(s[bdw]?)?)\b</string>
					<key>name</key>
					<string>keyword.mnemonic.general-purpose.io</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b((st|cl)[cdi]|cmc|[ls]ahf|(push|pop)f[dq]?)\b</string>
					<key>name</key>
					<string>keyword.mnemonic.general-purpose.flag-control</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(l[defgs]s)\b</string>
					<key>name</key>
					<string>keyword.mnemonic.general-purpose.segment-registers</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(lea|nop|ud2|xlatb?|cpuid|movbe)\b</string>
					<key>name</key>
					<string>keyword.mnemonic.general-purpose.misc</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(rdrand|rdseed)\b</string>
					<key>name</key>
					<string>keyword.mnemonic.general-purpose.rng</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(andn|bextr|bls(i|r|msk)|bzhi|pdep|pext|[lt]zcnt|(mul|ror|sar|shl|shr)x)\b</string>
					<key>name</key>
					<string>keyword.mnemonic.general-purpose.bmi</string>
				</dict>
			</array>
		</dict>
		<key>mnemonics-intel-isa-mpx</key>
		<dict>
			<key>match</key>
			<string>\b(bnd(mk|c[lnu]|mov|ldx|stx))\b</string>
			<key>name</key>
			<string>keyword.mnemonic.mpx</string>
		</dict>
		<key>mnemonics-intel-isa-sgx</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\be(add|block|create|dbg(rd|wr)|extend|init|ld[bu]|pa|remove|track|wb)\b</string>
					<key>name</key>
					<string>keyword.mnemonic.sgx1.supervisor</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\be(enter|exit|getkey|report|resume)\b</string>
					<key>name</key>
					<string>keyword.mnemonic.sgx1.user</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\be(aug|mod(pr|t))\b</string>
					<key>name</key>
					<string>keyword.mnemonic.sgx2.supervisor</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\be(accept(copy)?|modpe)\b</string>
					<key>name</key>
					<string>keyword.mnemonic.sgx2.user</string>
				</dict>
			</array>
		</dict>
		<key>mnemonics-intel-isa-sha</key>
		<dict>
			<key>match</key>
			<string>\b(sha(1rnds4|256rnds2|1nexte|(1|256)msg[12]))\b</string>
			<key>name</key>
			<string>keyword.mnemonic.sha</string>
		</dict>
		<key>mnemonics-invalid</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>include</key>
					<string>#mnemonics-invalid-amd-sse5</string>
				</dict>
			</array>
		</dict>
		<key>mnemonics-invalid-amd-sse5</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\b(com[ps][ds]|pcomu?[bdqw])\b</string>
					<key>name</key>
					<string>invalid.keyword.mnemonic.sse5.comparison</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(cvtp(h2ps|s2ph)|frcz[ps][ds])\b</string>
					<key>name</key>
					<string>invalid.keyword.mnemonic.sse5.conversion</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(fn?m((add|sub)[ps][ds])|ph(addu?(b[dqw]|w[dq]|dq)|sub(bw|dq|wd))|pma(css?(d(d|q[hl])|w[dw])|dcss?wd))\b</string>
					<key>name</key>
					<string>invalid.keyword.mnemonic.sse5.packed-arithmetic</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(pcmov|permp[ds]|pperm|prot[bdqw]|psh[al][bdqw])\b</string>
					<key>name</key>
					<string>invalid.keyword.mnemonic.sse5.simd-integer</string>
				</dict>
			</array>
		</dict>
		<key>mnemonics-mmx</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\b(mov[dq])\b</string>
					<key>name</key>
					<string>keyword.mnemonic.mmx.data-transfer</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(pack(ssdw|[su]swb)|punpck[hl](bw|dq|wd))\b</string>
					<key>name</key>
					<string>keyword.mnemonic.mmx.conversion</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(p(((add|sub)(d|(u?s)?[bw]))|maddwd|mul[lh]w))\b</string>
					<key>name</key>
					<string>keyword.mnemonic.mmx.packed-arithmetic</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(pcmp((eq|gt)[bdw]))\b</string>
					<key>name</key>
					<string>keyword.mnemonic.mmx.comparison</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(pandn?|px?or)\b</string>
					<key>name</key>
					<string>keyword.mnemonic.mmx.logical</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(ps([rl]l[dwq]|raw|rad))\b</string>
					<key>name</key>
					<string>keyword.mnemonic.mmx.shift-and-rotate</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(emms)\b</string>
					<key>name</key>
					<string>keyword.mnemonic.mmx.state-management</string>
				</dict>
			</array>
		</dict>
		<key>mnemonics-pseudo-ops</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\b(cmp(n?(eq|lt|le)|(un)?ord)[ps][ds])\b</string>
					<key>name</key>
					<string>keyword.pseudo-mnemonic.sse2.compare</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(v?pclmul([hl]q[hl]q|[hl]qh)dq)\b</string>
					<key>name</key>
					<string>keyword.pseudo-mnemonic.avx.promoted.aes</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(vcmp(eq(_(os|uq|us))?|neq(_(oq|os|us))?|[gl][et](_oq)?|n[gl][et](_uq)?|(un)?ord(_s)?|false(_os)?|true(_us)?)[ps][ds])\b</string>
					<key>name</key>
					<string>keyword.pseudo-mnemonic.avx.promoted.comparison</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(vpcom(n?eq|[gl][et]|false|true)(b|uw))\b</string>
					<key>name</key>
					<string>keyword.pseudo-mnemonic.supplemental.amd.xop.simd</string>
				</dict>
			</array>
		</dict>
		<key>mnemonics-smx</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\b(getsec)\b</string>
					<key>name</key>
					<string>keyword.mnemonic.smx.getsec</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(capabilities|enteraccs|exitac|senter|sexit|parameters|smctrl|wakeup)\b</string>
					<key>name</key>
					<string>support.constant</string>
				</dict>
			</array>
		</dict>
		<key>mnemonics-sse</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\b(mov(([ahlu]|hl|lh|msk)ps|ss))\b</string>
					<key>name</key>
					<string>keyword.mnemonic.sse.data-transfer</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b((add|div|max|min|mul|rcp|r?sqrt|sub)[ps]s)\b</string>
					<key>name</key>
					<string>keyword.mnemonic.sse.packed-arithmetic</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(cmp[ps]s|u?comiss)\b</string>
					<key>name</key>
					<string>keyword.mnemonic.sse.comparison</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b((andn?|x?or)ps)\b</string>
					<key>name</key>
					<string>keyword.mnemonic.sse.logical</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b((shuf|unpck[hl])ps)\b</string>
					<key>name</key>
					<string>keyword.mnemonic.sse.shuffle-and-unpack</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(cvt(pi2ps|si2ss|ps2pi|tps2pi|ss2si|tss2si))\b</string>
					<key>name</key>
					<string>keyword.mnemonic.sse.conversion</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b((ld|st)mxcsr)\b</string>
					<key>name</key>
					<string>keyword.mnemonic.sse.state-management</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(p(avg[bw]|extrw|insrw|(max|min)(sw|ub)|sadbw|shufw|mulhuw|movmskb))\b</string>
					<key>name</key>
					<string>keyword.mnemonic.sse.simd-integer</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(maskmovq|movntps|sfence)\b</string>
					<key>name</key>
					<string>keyword.mnemonic.sse.cacheability-control</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(prefetch(nta|t[0-2]|w(t1)?))\b</string>
					<key>name</key>
					<string>keyword.mnemonic.sse.prefetch</string>
				</dict>
			</array>
		</dict>
		<key>mnemonics-sse2</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\b(mov([auhl]|msk)pd)\b</string>
					<key>name</key>
					<string>keyword.mnemonic.sse2.data-transfer</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b((add|div|max|min|mul|sub|sqrt)[ps]d)\b</string>
					<key>name</key>
					<string>keyword.mnemonic.sse2.packed-arithmetic</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b((andn?|x?or)pd)\b</string>
					<key>name</key>
					<string>keyword.mnemonic.sse2.logical</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b((cmpp|u?comis)d)\b</string>
					<key>name</key>
					<string>keyword.mnemonic.sse2.compare</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b((shuf|unpck[hl])pd)\b</string>
					<key>name</key>
					<string>keyword.mnemonic.sse2.shuffle-and-unpack</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(cvt(dq2pd|pi2pd|ps2pd|pd2ps|si2sd|sd2ss|ss2sd|t?(pd2dq|pd2pi|sd2si)))\b</string>
					<key>name</key>
					<string>keyword.mnemonic.sse2.conversion</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(cvt(dq2ps|ps2dq|tps2dq))\b</string>
					<key>name</key>
					<string>keyword.mnemonic.sse2.packed-floating-point</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(mov(dq[au]|q2dq|dq2q))\b</string>
					<key>name</key>
					<string>keyword.mnemonic.sse2.simd-integer.mov</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(p((add|sub|(s[lr]l|mulu|unpck[hl]q)d)q|shuf(d|[hl]w)))\b</string>
					<key>name</key>
					<string>keyword.mnemonic.sse2.simd-integer.other</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(clflush|[lm]fence|pause|maskmovdqu|movnt(dq|i|pd))\b</string>
					<key>name</key>
					<string>keyword.mnemonic.sse2.cacheability-control</string>
				</dict>
			</array>
		</dict>
		<key>mnemonics-sse3</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\b(fisttp|lddqu|(addsub|h(add|sub))p[sd]|mov(sh|sl|d)dup|monitor|mwait)\b</string>
					<key>name</key>
					<string>keyword.mnemonic.sse3</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(ph(add|sub)(s?w|d))\b</string>
					<key>name</key>
					<string>keyword.mnemonic.sse3.supplimental.horizontal-packed-arithmetic</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(p((abs|sign)[bdw]|maddubsw|mulhrsw|shufb|alignr))\b</string>
					<key>name</key>
					<string>keyword.mnemonic.sse3.supplimental.other</string>
				</dict>
			</array>
		</dict>
		<key>mnemonics-sse4</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\b(pmul(ld|dq)|dpp[ds])\b</string>
					<key>name</key>
					<string>keyword.mnemonic.sse4.1.arithmetic</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(movntdqa)\b</string>
					<key>name</key>
					<string>keyword.mnemonic.sse4.1.load-hint</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(blendv?p[ds]|pblend(vb|w))\b</string>
					<key>name</key>
					<string>keyword.mnemonic.sse4.1.packed-blending</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(p(min|max)(u[dw]|s[bd]))\b</string>
					<key>name</key>
					<string>keyword.mnemonic.sse4.1.packed-integer</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(round[ps][sd])\b</string>
					<key>name</key>
					<string>keyword.mnemonic.sse4.1.packed-floating-point</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b((extract|insert)ps|p((ins|ext)(r[bdq])))\b</string>
					<key>name</key>
					<string>keyword.mnemonic.sse4.1.insertion-and-extraction</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(pmov([sz]x(b[dqw]|dq|wd|wq)))\b</string>
					<key>name</key>
					<string>keyword.mnemonic.sse4.1.conversion</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(mpsadbw|phminposuw|ptest|pcmpeqq|packusdw)\b</string>
					<key>name</key>
					<string>keyword.mnemonic.sse4.1.other</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(pcmp([ei]str[im]|gtq))\b</string>
					<key>name</key>
					<string>keyword.mnemonic.sse4.2</string>
				</dict>
			</array>
		</dict>
		<key>mnemonics-supplemental-amd</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\b(bl([cs](fill|ic?|msk)|cs)|t1mskc|tzmsk)\b</string>
					<key>name</key>
					<string>keyword.mnemonic.supplemental.amd.general-purpose</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(clgi|int3|invlpga|iretw|skinit|stgi|vm(load|mcall|run|save)|monitorx|mwaitx)\b</string>
					<key>name</key>
					<string>keyword.mnemonic.supplemental.amd.system</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b([ls]lwpcb|lwp(ins|val))\b</string>
					<key>name</key>
					<string>keyword.mnemonic.supplemental.amd.profiling</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(movnts[ds])\b</string>
					<key>name</key>
					<string>keyword.mnemonic.supplemental.amd.memory-management</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(prefetch|clzero)\b</string>
					<key>name</key>
					<string>keyword.mnemonic.supplemental.amd.cache-management</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b((extr|insert)q)\b</string>
					<key>name</key>
					<string>keyword.mnemonic.supplemental.amd.sse4.a</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(vfn?m((add|sub)[ps][ds])|vfm((addsub|subadd)p[ds]))\b</string>
					<key>name</key>
					<string>keyword.mnemonic.supplemental.amd.fma4</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(vp(cmov|(comu?|rot|sh[al])[bdqw]|mac(s?s(d(d|q[hl])|w[dw]))|madcss?wd|perm))\b</string>
					<key>name</key>
					<string>keyword.mnemonic.supplemental.amd.xop.simd</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(vph(addu?(b[dqw]|w[dq]|dq)|sub(bw|dq|wd)))\b</string>
					<key>name</key>
					<string>keyword.mnemonic.supplemental.amd.xop.simd-horizontal</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(vfrcz[ps][ds]|vpermil2p[ds])\b</string>
					<key>name</key>
					<string>keyword.mnemonic.supplemental.amd.xop.other</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(femms)\b</string>
					<key>name</key>
					<string>keyword.mnemonic.supplemental.amd.3dnow</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(p(avgusb|(f2i|i2f)[dw]|mulhrw|swapd)|pf((p?n)?acc|add|max|min|mul|rcp(it[12])?|rsqit1|rsqrt|subr?))\b</string>
					<key>name</key>
					<string>keyword.mnemonic.supplemental.amd.3dnow.simd</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(pfcmp(eq|ge|gt))\b</string>
					<key>name</key>
					<string>keyword.mnemonic.supplemental.amd.3dnow.comparison</string>
				</dict>
			</array>
		</dict>
		<key>mnemonics-supplemental-cyrix</key>
		<dict>
			<key>match</key>
			<string>\b((sv|rs)dc|(wr|rd)shr)\b</string>
			<key>name</key>
			<string>keyword.mnemonic.supplemental.cyrix</string>
		</dict>
		<key>mnemonics-supplemental-via</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\b(montmul)\b</string>
					<key>name</key>
					<string>keyword.mnemonic.supplemental.via</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(x(store(rng)?|crypt(ecb|cbc|ctr|cfb|ofb)|sha(1|256)))\b</string>
					<key>name</key>
					<string>keyword.mnemonic.supplemental.via.padlock</string>
				</dict>
			</array>
		</dict>
		<key>mnemonics-system</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\b((cl|st)ac|[ls]([gli]dt|tr|msw)|clts|arpl|lar|lsl|ver[rw]|inv(d|lpg|pcid)|wbinvd)\b</string>
					<key>name</key>
					<string>keyword.mnemonic.system</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(lock|hlt|rsm|(rd|wr)(msr|pkru|[fg]sbase)|rd(pmc|tscp?)|sys(enter|exit))\b</string>
					<key>name</key>
					<string>keyword.mnemonic.system</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(x((save(c|opt|s)?|rstors?)(64)?|[gs]etbv))\b</string>
					<key>name</key>
					<string>keyword.mnemonic.system</string>
				</dict>
			</array>
		</dict>
		<key>mnemonics-tsx</key>
		<dict>
			<key>match</key>
			<string>\b(x(abort|acquire|release|begin|end|test))\b</string>
			<key>name</key>
			<string>keyword.mnemonic.tsx</string>
		</dict>
		<key>mnemonics-undocumented</key>
		<dict>
			<key>match</key>
			<string>\b(ret[nf]|icebp|int1|smi)\b</string>
			<key>name</key>
			<string>keyword.mnemonic.undocumented</string>
		</dict>
		<key>mnemonics-vmx</key>
		<dict>
			<key>match</key>
			<string>\b(vm(ptr(ld|st)|clear|read|write|launch|resume|xo(ff|n)|call|func)|inv(ept|vpid))\b</string>
			<key>name</key>
			<string>keyword.mnemonic.vmx</string>
		</dict>
		<key>preprocessor</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>^\s*[#%]\s*(error|warning)\b</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.import.error.c</string>
						</dict>
					</dict>
					<key>end</key>
					<string>$</string>
					<key>name</key>
					<string>meta.preprocessor.diagnostic.c</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>(?&gt;\\\s*\n)</string>
							<key>name</key>
							<string>punctuation.separator.continuation.c</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>^\s*[#%]\s*(include|import)\b\s+</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.import.include.c</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=(?://|/\*))|$</string>
					<key>name</key>
					<string>meta.preprocessor.c.include</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>(?&gt;\\\s*\n)</string>
							<key>name</key>
							<string>punctuation.separator.continuation.c</string>
						</dict>
						<dict>
							<key>begin</key>
							<string>"</string>
							<key>beginCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.string.begin.c</string>
								</dict>
							</dict>
							<key>end</key>
							<string>"</string>
							<key>endCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.string.end.c</string>
								</dict>
							</dict>
							<key>name</key>
							<string>string.quoted.double.include.c</string>
						</dict>
						<dict>
							<key>begin</key>
							<string>&lt;</string>
							<key>beginCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.string.begin.c</string>
								</dict>
							</dict>
							<key>end</key>
							<string>&gt;</string>
							<key>endCaptures</key>
							<dict>
								<key>0</key>
								<dict>
									<key>name</key>
									<string>punctuation.definition.string.end.c</string>
								</dict>
							</dict>
							<key>name</key>
							<string>string.quoted.other.lt-gt.include.c</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>^\s*[%#]\s*((xi?)?define|defined|elif(def)?|else|if(macro|ctx|idni?|num|str)?|ifn?def|line|(end)?macro|pragma|undef|endif)\b</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control.import.c</string>
						</dict>
					</dict>
					<key>end</key>
					<string>(?=(?://|/\*))|$</string>
					<key>name</key>
					<string>meta.preprocessor.c</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>(?&gt;\\\s*\n)</string>
							<key>name</key>
							<string>punctuation.separator.continuation.c</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>^\s*[#%]\s*(assign|strlen|substr|(end|exit)?rep|push|pop)\b</string>
					<key>captures</key>
					<dict>
						<key>1</key>
						<dict>
							<key>name</key>
							<string>keyword.control</string>
						</dict>
					</dict>
					<key>end</key>
					<string>$</string>
					<key>name</key>
					<string>meta.preprocessor.nasm</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>match</key>
							<string>(?&gt;\\\s*\n)</string>
							<key>name</key>
							<string>punctuation.separator.continuation.c</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>registers</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>\b%?([abcd][hl]|[er]?[abcd]x|[er]?(di|si|bp|sp)|dil|sil|bpl|spl|r(8|9|1[0-5])[bdlw]?)\b</string>
					<key>name</key>
					<string>constant.language.registers.general-purpose</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b%?([cdefgs]s)\b</string>
					<key>name</key>
					<string>constant.language.registers.segment</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b%?([er]?flags)\b</string>
					<key>name</key>
					<string>constant.language.registers.flags</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b%?([er]?ip)\b</string>
					<key>name</key>
					<string>constant.language.registers.instruction-pointer</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b%?(cr[02-4])\b</string>
					<key>name</key>
					<string>constant.language.registers.control</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b%?((mm|st|fpr)[0-7])\b</string>
					<key>name</key>
					<string>constant.language.registers.mmx</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b%?([xy]mm([0-9]|1[0-5])|mxcsr)\b</string>
					<key>name</key>
					<string>constant.language.registers.sse_avx</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b%?(zmm([12]?[0-9]|30|31))\b</string>
					<key>name</key>
					<string>constant.language.registers.avx512</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b%?(bnd([0-3]|cfg[su]|status))\b</string>
					<key>name</key>
					<string>constant.language.registers.memory-protection</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b%?(([gil]dt)r?|tr)\b</string>
					<key>name</key>
					<string>constant.language.registers.system-table-pointer</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b%?(dr[0-367])\b</string>
					<key>name</key>
					<string>constant.language.registers.debug</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b%?(cr8|dr([89]|1[0-5])|efer|tpr|syscfg)\b</string>
					<key>name</key>
					<string>constant.language.registers.amd</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b%?(db[0-367]|t[67]|tr[3-7]|st)\b</string>
					<key>name</key>
					<string>invalid.deprecated</string>
				</dict>
			</array>
		</dict>
		<key>strings</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>begin</key>
					<string>["'`]</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.asm</string>
						</dict>
					</dict>
					<key>end</key>
					<string>["'`]</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.asm</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.asm</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#string_escaped_char</string>
						</dict>
						<dict>
							<key>include</key>
							<string>#string_placeholder</string>
						</dict>
					</array>
				</dict>
				<dict>
					<key>begin</key>
					<string>'</string>
					<key>beginCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.begin.c</string>
						</dict>
					</dict>
					<key>end</key>
					<string>'</string>
					<key>endCaptures</key>
					<dict>
						<key>0</key>
						<dict>
							<key>name</key>
							<string>punctuation.definition.string.end.c</string>
						</dict>
					</dict>
					<key>name</key>
					<string>string.quoted.single.c</string>
					<key>patterns</key>
					<array>
						<dict>
							<key>include</key>
							<string>#string_escaped_char</string>
						</dict>
					</array>
				</dict>
			</array>
		</dict>
		<key>support</key>
		<dict>
			<key>patterns</key>
			<array>
				<dict>
					<key>match</key>
					<string>(?i)\b(s?byte|([doqtyz]|dq|s[dq]?)?word|(d|res)[bdoqtwyz]?|ddq|incbin|equ|times|(end|i)?struc|at|iend)\b</string>
					<key>name</key>
					<string>support.type.asm</string>
				</dict>
				<dict>
					<key>match</key>
					<string>(?i)\b(\.?(alignb?|bits|cpu|fpu)|use(16|32|64))\b</string>
					<key>name</key>
					<string>support.directive.asm</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b(strict|nosplit|near|far|abs|rel|seg|wrt|absolute|common)\b</string>
					<key>name</key>
					<string>support.modifier.asm</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b([ao](16|32|64))\b</string>
					<key>name</key>
					<string>support.prefix.asm</string>
				</dict>
				<dict>
					<key>match</key>
					<string>\b__(utf((16|32)([lb]e)?)|float(8|16|32|64|80[me]|128[lh])|Infinity|[QS]?NaN)__\b</string>
					<key>name</key>
					<string>support.function.asm</string>
				</dict>
			</array>
		</dict>
	</dict>
	<key>scopeName</key>
	<string>source.asm.x86_64</string>
	<key>uuid</key>
	<string>05d6565d-991a-4e88-8e28-63bb21197f32</string>
</dict>
</plist>
